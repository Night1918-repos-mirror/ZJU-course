////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : disp_num.vf
// /___/   /\     Timestamp : 11/21/2020 19:52:03
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family artix7 -verilog E:/Verilog_proj/Lab10/myRevCounter/disp_num.vf -w E:/Verilog_proj/Lab10/myRevCounter/disp_num.sch
//Design Name: disp_num
//Device: artix7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module INV4_HXILINX_disp_num (O0, O1, O2, O3, I0, I1, I2, I3);
    

   output O0;
   output O1;
   output O2;
   output O3;

   input  I0;
   input  I1;
   input  I2;
   input  I3;

assign O0 = !I0;
assign O1 = !I1;
assign O2 = !I2;
assign O3 = !I3;

endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_disp_num (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 1ns / 1ps

module MC14495_MUSER_disp_num(D0, 
                              D1, 
                              D2, 
                              D3, 
                              LE, 
                              Point, 
                              a, 
                              b, 
                              c, 
                              d, 
                              e, 
                              f, 
                              g, 
                              p);

    input D0;
    input D1;
    input D2;
    input D3;
    input LE;
    input Point;
   output a;
   output b;
   output c;
   output d;
   output e;
   output f;
   output g;
   output p;
   
   wire XLXN_48;
   wire XLXN_50;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_95;
   wire XLXN_96;
   wire XLXN_97;
   wire XLXN_98;
   wire XLXN_104;
   wire XLXN_105;
   wire XLXN_106;
   wire XLXN_112;
   wire XLXN_113;
   wire XLXN_114;
   wire XLXN_117;
   wire XLXN_118;
   wire XLXN_119;
   wire XLXN_121;
   wire XLXN_122;
   wire XLXN_123;
   wire XLXN_125;
   wire XLXN_126;
   wire XLXN_127;
   wire XLXN_128;
   wire XLXN_130;
   wire XLXN_132;
   wire XLXN_133;
   wire XLXN_136;
   wire XLXN_137;
   wire XLXN_138;
   wire XLXN_139;
   wire XLXN_140;
   wire XLXN_141;
   wire XLXN_142;
   
   INV  XLXI_57 (.I(D3), 
                .O(XLXN_123));
   INV  XLXI_58 (.I(D2), 
                .O(XLXN_48));
   INV  XLXI_59 (.I(D1), 
                .O(XLXN_50));
   INV  XLXI_60 (.I(D0), 
                .O(XLXN_117));
   AND4  XLXI_61 (.I0(D0), 
                 .I1(XLXN_50), 
                 .I2(XLXN_48), 
                 .I3(XLXN_123), 
                 .O(XLXN_58));
   AND4  XLXI_62 (.I0(XLXN_117), 
                 .I1(XLXN_50), 
                 .I2(D2), 
                 .I3(XLXN_123), 
                 .O(XLXN_59));
   AND4  XLXI_63 (.I0(D0), 
                 .I1(D1), 
                 .I2(XLXN_48), 
                 .I3(D3), 
                 .O(XLXN_60));
   AND4  XLXI_64 (.I0(D0), 
                 .I1(XLXN_50), 
                 .I2(D2), 
                 .I3(D3), 
                 .O(XLXN_61));
   OR4  XLXI_65 (.I0(XLXN_61), 
                .I1(XLXN_60), 
                .I2(XLXN_59), 
                .I3(XLXN_58), 
                .O(XLXN_142));
   AND4  XLXI_66 (.I0(D0), 
                 .I1(XLXN_50), 
                 .I2(D2), 
                 .I3(XLXN_123), 
                 .O(XLXN_95));
   AND3  XLXI_67 (.I0(XLXN_117), 
                 .I1(D1), 
                 .I2(D2), 
                 .O(XLXN_96));
   AND3  XLXI_68 (.I0(XLXN_117), 
                 .I1(D2), 
                 .I2(D3), 
                 .O(XLXN_97));
   AND3  XLXI_69 (.I0(D0), 
                 .I1(D1), 
                 .I2(D3), 
                 .O(XLXN_98));
   OR4  XLXI_70 (.I0(XLXN_98), 
                .I1(XLXN_97), 
                .I2(XLXN_96), 
                .I3(XLXN_95), 
                .O(XLXN_141));
   AND4  XLXI_71 (.I0(XLXN_117), 
                 .I1(D1), 
                 .I2(XLXN_48), 
                 .I3(XLXN_123), 
                 .O(XLXN_104));
   AND3  XLXI_72 (.I0(XLXN_117), 
                 .I1(D2), 
                 .I2(D3), 
                 .O(XLXN_105));
   AND3  XLXI_73 (.I0(D1), 
                 .I1(D2), 
                 .I2(D3), 
                 .O(XLXN_106));
   OR3  XLXI_74 (.I0(XLXN_106), 
                .I1(XLXN_105), 
                .I2(XLXN_104), 
                .O(XLXN_140));
   AND4  XLXI_75 (.I0(D0), 
                 .I1(XLXN_50), 
                 .I2(XLXN_48), 
                 .I3(XLXN_123), 
                 .O(XLXN_112));
   AND4  XLXI_76 (.I0(XLXN_117), 
                 .I1(XLXN_50), 
                 .I2(D2), 
                 .I3(XLXN_123), 
                 .O(XLXN_113));
   AND3  XLXI_77 (.I0(D0), 
                 .I1(D1), 
                 .I2(D2), 
                 .O(XLXN_114));
   OR4  XLXI_79 (.I0(XLXN_118), 
                .I1(XLXN_114), 
                .I2(XLXN_113), 
                .I3(XLXN_112), 
                .O(XLXN_139));
   AND4  XLXI_82 (.I0(XLXN_117), 
                 .I1(D1), 
                 .I2(XLXN_48), 
                 .I3(D3), 
                 .O(XLXN_118));
   AND2  XLXI_83 (.I0(D0), 
                 .I1(XLXN_123), 
                 .O(XLXN_119));
   AND3  XLXI_84 (.I0(XLXN_50), 
                 .I1(D2), 
                 .I2(XLXN_123), 
                 .O(XLXN_121));
   AND3  XLXI_85 (.I0(D0), 
                 .I1(XLXN_50), 
                 .I2(XLXN_48), 
                 .O(XLXN_122));
   OR3  XLXI_86 (.I0(XLXN_122), 
                .I1(XLXN_121), 
                .I2(XLXN_119), 
                .O(XLXN_138));
   AND3  XLXI_88 (.I0(D0), 
                 .I1(XLXN_48), 
                 .I2(XLXN_123), 
                 .O(XLXN_125));
   AND3  XLXI_89 (.I0(D1), 
                 .I1(XLXN_48), 
                 .I2(XLXN_123), 
                 .O(XLXN_126));
   AND3  XLXI_90 (.I0(D0), 
                 .I1(D1), 
                 .I2(XLXN_123), 
                 .O(XLXN_127));
   AND4  XLXI_91 (.I0(D0), 
                 .I1(XLXN_50), 
                 .I2(D2), 
                 .I3(D3), 
                 .O(XLXN_128));
   OR4  XLXI_92 (.I0(XLXN_128), 
                .I1(XLXN_127), 
                .I2(XLXN_126), 
                .I3(XLXN_125), 
                .O(XLXN_137));
   AND3  XLXI_93 (.I0(XLXN_50), 
                 .I1(XLXN_48), 
                 .I2(XLXN_123), 
                 .O(XLXN_130));
   AND4  XLXI_94 (.I0(D0), 
                 .I1(D1), 
                 .I2(D2), 
                 .I3(XLXN_123), 
                 .O(XLXN_132));
   AND4  XLXI_95 (.I0(XLXN_117), 
                 .I1(XLXN_50), 
                 .I2(D2), 
                 .I3(D3), 
                 .O(XLXN_133));
   OR3  XLXI_96 (.I0(XLXN_133), 
                .I1(XLXN_132), 
                .I2(XLXN_130), 
                .O(XLXN_136));
   OR2  XLXI_97 (.I0(LE), 
                .I1(XLXN_142), 
                .O(a));
   OR2  XLXI_98 (.I0(LE), 
                .I1(XLXN_141), 
                .O(b));
   OR2  XLXI_99 (.I0(LE), 
                .I1(XLXN_140), 
                .O(c));
   OR2  XLXI_100 (.I0(LE), 
                 .I1(XLXN_139), 
                 .O(d));
   OR2  XLXI_101 (.I0(LE), 
                 .I1(XLXN_138), 
                 .O(e));
   OR2  XLXI_102 (.I0(LE), 
                 .I1(XLXN_137), 
                 .O(f));
   OR2  XLXI_103 (.I0(LE), 
                 .I1(XLXN_136), 
                 .O(g));
   INV  XLXI_105 (.I(Point), 
                 .O(p));
endmodule
`timescale 1ns / 1ps

module Mux4to1_MUSER_disp_num(l0, 
                              l1, 
                              l2, 
                              l3, 
                              s, 
                              o);

    input l0;
    input l1;
    input l2;
    input l3;
    input [1:0] s;
   output o;
   
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   
   INV  XLXI_1 (.I(s[1]), 
               .O(XLXN_8));
   INV  XLXI_2 (.I(s[0]), 
               .O(XLXN_9));
   AND2  XLXI_5 (.I0(XLXN_9), 
                .I1(XLXN_8), 
                .O(XLXN_15));
   AND2  XLXI_6 (.I0(s[0]), 
                .I1(XLXN_8), 
                .O(XLXN_16));
   AND2  XLXI_7 (.I0(XLXN_9), 
                .I1(s[1]), 
                .O(XLXN_17));
   AND2  XLXI_8 (.I0(s[0]), 
                .I1(s[1]), 
                .O(XLXN_18));
   AND2  XLXI_9 (.I0(XLXN_15), 
                .I1(l0), 
                .O(XLXN_19));
   AND2  XLXI_10 (.I0(XLXN_16), 
                 .I1(l1), 
                 .O(XLXN_20));
   AND2  XLXI_11 (.I0(XLXN_17), 
                 .I1(l2), 
                 .O(XLXN_21));
   AND2  XLXI_12 (.I0(XLXN_18), 
                 .I1(l3), 
                 .O(XLXN_22));
   OR4  XLXI_13 (.I0(XLXN_22), 
                .I1(XLXN_21), 
                .I2(XLXN_20), 
                .I3(XLXN_19), 
                .O(o));
endmodule
`timescale 1ns / 1ps

module Mux4to1b4_MUSER_disp_num(l0, 
                                l1, 
                                l2, 
                                l3, 
                                s, 
                                o);

    input [3:0] l0;
    input [3:0] l1;
    input [3:0] l2;
    input [3:0] l3;
    input [1:0] s;
   output [3:0] o;
   
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_129;
   wire XLXN_130;
   wire XLXN_131;
   wire XLXN_132;
   wire XLXN_133;
   wire XLXN_134;
   wire XLXN_135;
   wire XLXN_136;
   wire XLXN_137;
   wire XLXN_138;
   wire XLXN_139;
   wire XLXN_140;
   wire XLXN_141;
   wire XLXN_142;
   wire XLXN_143;
   wire XLXN_144;
   
   INV  XLXI_1 (.I(s[1]), 
               .O(XLXN_4));
   INV  XLXI_2 (.I(s[0]), 
               .O(XLXN_5));
   AND2  XLXI_3 (.I0(XLXN_5), 
                .I1(XLXN_4), 
                .O(XLXN_6));
   AND2  XLXI_4 (.I0(s[0]), 
                .I1(XLXN_4), 
                .O(XLXN_7));
   AND2  XLXI_5 (.I0(XLXN_5), 
                .I1(s[1]), 
                .O(XLXN_8));
   AND2  XLXI_6 (.I0(s[0]), 
                .I1(s[1]), 
                .O(XLXN_9));
   AND2  XLXI_7 (.I0(l0[0]), 
                .I1(XLXN_6), 
                .O(XLXN_129));
   AND2  XLXI_8 (.I0(l1[0]), 
                .I1(XLXN_7), 
                .O(XLXN_130));
   AND2  XLXI_9 (.I0(l2[0]), 
                .I1(XLXN_8), 
                .O(XLXN_131));
   AND2  XLXI_10 (.I0(l3[0]), 
                 .I1(XLXN_9), 
                 .O(XLXN_132));
   AND2  XLXI_11 (.I0(l0[1]), 
                 .I1(XLXN_6), 
                 .O(XLXN_133));
   AND2  XLXI_12 (.I0(l1[1]), 
                 .I1(XLXN_7), 
                 .O(XLXN_134));
   AND2  XLXI_13 (.I0(l2[1]), 
                 .I1(XLXN_8), 
                 .O(XLXN_135));
   AND2  XLXI_14 (.I0(l3[1]), 
                 .I1(XLXN_9), 
                 .O(XLXN_136));
   AND2  XLXI_16 (.I0(l0[2]), 
                 .I1(XLXN_6), 
                 .O(XLXN_137));
   AND2  XLXI_17 (.I0(l1[2]), 
                 .I1(XLXN_7), 
                 .O(XLXN_138));
   AND2  XLXI_18 (.I0(l2[2]), 
                 .I1(XLXN_8), 
                 .O(XLXN_139));
   AND2  XLXI_19 (.I0(l3[2]), 
                 .I1(XLXN_9), 
                 .O(XLXN_140));
   AND2  XLXI_21 (.I0(l0[3]), 
                 .I1(XLXN_6), 
                 .O(XLXN_141));
   AND2  XLXI_22 (.I0(l1[3]), 
                 .I1(XLXN_7), 
                 .O(XLXN_142));
   AND2  XLXI_23 (.I0(l2[3]), 
                 .I1(XLXN_8), 
                 .O(XLXN_143));
   AND2  XLXI_24 (.I0(l3[3]), 
                 .I1(XLXN_9), 
                 .O(XLXN_144));
   OR4  XLXI_111 (.I0(XLXN_132), 
                 .I1(XLXN_131), 
                 .I2(XLXN_130), 
                 .I3(XLXN_129), 
                 .O(o[0]));
   OR4  XLXI_112 (.I0(XLXN_136), 
                 .I1(XLXN_135), 
                 .I2(XLXN_134), 
                 .I3(XLXN_133), 
                 .O(o[1]));
   OR4  XLXI_113 (.I0(XLXN_140), 
                 .I1(XLXN_139), 
                 .I2(XLXN_138), 
                 .I3(XLXN_137), 
                 .O(o[2]));
   OR4  XLXI_114 (.I0(XLXN_144), 
                 .I1(XLXN_143), 
                 .I2(XLXN_142), 
                 .I3(XLXN_141), 
                 .O(o[3]));
endmodule
`timescale 1ns / 1ps

module DisplaySync_sch_MUSER_disp_num(Hexs, 
                                      LES, 
                                      points, 
                                      scan, 
                                      AN, 
                                      HEX, 
                                      LE, 
                                      p);

    input [15:0] Hexs;
    input [3:0] LES;
    input [3:0] points;
    input [1:0] scan;
   output [3:0] AN;
   output [3:0] HEX;
   output LE;
   output p;
   
   wire XLXN_9;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   
   Mux4to1b4_MUSER_disp_num  XLXI_1 (.l0(Hexs[3:0]), 
                                    .l1(Hexs[7:4]), 
                                    .l2(Hexs[11:8]), 
                                    .l3(Hexs[15:12]), 
                                    .s(scan[1:0]), 
                                    .o(HEX[3:0]));
   Mux4to1_MUSER_disp_num  XLXI_2 (.l0(points[0]), 
                                  .l1(points[1]), 
                                  .l2(points[2]), 
                                  .l3(points[3]), 
                                  .s(scan[1:0]), 
                                  .o(p));
   Mux4to1_MUSER_disp_num  XLXI_3 (.l0(LES[0]), 
                                  .l1(LES[1]), 
                                  .l2(LES[2]), 
                                  .l3(LES[3]), 
                                  .s(scan[1:0]), 
                                  .o(LE));
   VCC  XLXI_5 (.P(XLXN_9));
   (* HU_SET = "XLXI_6_0" *) 
   D2_4E_HXILINX_disp_num  XLXI_6 (.A0(scan[0]), 
                                  .A1(scan[1]), 
                                  .E(XLXN_9), 
                                  .D0(XLXN_14), 
                                  .D1(XLXN_15), 
                                  .D2(XLXN_16), 
                                  .D3(XLXN_17));
   (* HU_SET = "XLXI_7_1" *) 
   INV4_HXILINX_disp_num  XLXI_7 (.I0(XLXN_17), 
                                 .I1(XLXN_16), 
                                 .I2(XLXN_15), 
                                 .I3(XLXN_14), 
                                 .O0(AN[3]), 
                                 .O1(AN[2]), 
                                 .O2(AN[1]), 
                                 .O3(AN[0]));
endmodule
`timescale 1ns / 1ps

module disp_num(clk, 
                HEXS, 
                LES, 
                points, 
                rst, 
                AN, 
                segment);

    input clk;
    input [15:0] HEXS;
    input [3:0] LES;
    input [3:0] points;
    input rst;
   output [3:0] AN;
   output [7:0] segment;
   
   wire [31:0] clkdiv;
   wire [3:0] HEX;
   wire XLXN_10;
   wire XLXN_11;
   
   DisplaySync_sch_MUSER_disp_num  XLXI_2 (.Hexs(HEXS[15:0]), 
                                          .LES(LES[3:0]), 
                                          .points(points[3:0]), 
                                          .scan(clkdiv[18:17]), 
                                          .AN(AN[3:0]), 
                                          .HEX(HEX[3:0]), 
                                          .LE(XLXN_11), 
                                          .p(XLXN_10));
   MC14495_MUSER_disp_num  XLXI_3 (.D0(HEX[0]), 
                                  .D1(HEX[1]), 
                                  .D2(HEX[2]), 
                                  .D3(HEX[3]), 
                                  .LE(XLXN_11), 
                                  .Point(XLXN_10), 
                                  .a(segment[0]), 
                                  .b(segment[1]), 
                                  .c(segment[2]), 
                                  .d(segment[3]), 
                                  .e(segment[4]), 
                                  .f(segment[5]), 
                                  .g(segment[6]), 
                                  .p(segment[7]));
   clkdiv  XLXI_5 (.clk(clk), 
                  .rst(rst), 
                  .clkdiv(clkdiv[31:0]));
endmodule
